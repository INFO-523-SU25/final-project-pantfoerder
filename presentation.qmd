---
title: "Cats in the USA"
subtitle: "INFO 523 - Final Project"
author: "Nessa Pantfoerder"
format:
  revealjs:
    theme:  ['data/customtheming.scss']
    slide-number: true
    embed-resources: true
    transition: slide
    center: false
    controls: true
    include-in-header: _extra/audio.html
editor: visual
jupyter: python3
execute:
  echo: false
  warning: false
  message: false
---

## Goals

**Pet Cats USA Dashboard**
Transform a dataset of pet cats tracked throughout the USA to a dashboard that answers:

-   How is the population distributed across **sex** and **life stage**?
-   How does **hunting** vary by life stage and sex?
-   How does **age** relate to **prey per month**?

*Data source:* `data/pet-cats-usa-reference-data.csv`

------------------------------------------------------------------------

## Dataset & Variables

-   `animal-id`: unique cat identifier
-   `animal-sex`: sex (normalized to `m`, `f`, `unknown`)
-   `animal-life-stage`: text containing a numeric **age in years**
-   `animal-comments`: e.g., `Hunt: Yes; prey_p_month: 12`
-   `age_years`: (int) *derived*
-   `life_stage_bin`: {kitten ≤2, adult 2–6, mature 6–10, senior \>10} *derived*
-   `hunts`: (bool) *derived*, `prey_p_month`: (float) *derived*

------------------------------------------------------------------------

## Methods (Justification)

-   **Cleaning** → transparent and reproducible
-   **Parsing** → variables (hunts & prey/month)
-   **Binning** → interpretable comparisons across life stages
-   **Mining** → counts, distributions, and associations
-   **Charts** → portable, reproducible, and informative

------------------------------------------------------------------------

## Setup and Cleaning

Before analysis, we prepared the dataset to ensure accuracy and usability:

-   Imported the dataset `pet-cats-usa-reference-data.csv`.
-   Cleaned **animal-life-stage** values by removing blanks, stripping text, and converting to integers.
-   Binned ages into **Kitten, Adult, Mature, and Senior** categories.
-   Parsed the **animal-comments** column to extract if the cat is a hunter and how many prey per month caught.

```{python}
import pandas as pd
import numpy as np
import re

df = pd.read_csv("data/pet-cats-usa-reference-data.csv")

cols_map = {c.lower().strip().replace(" ", "-").replace("_","-"): c for c in df.columns}
def get_col(*cands):
    for cand in cands:
        key = cand.lower().strip().replace(" ", "-").replace("_","-")
        if key in cols_map:
            return cols_map[key]
        hit = [orig for k, orig in cols_map.items() if key in k]
        if hit:
            return hit[0]
    return None

col_animal_id   = get_col("animal-id","individual-local-identifier","animal_id")
col_animal_sex  = get_col("animal-sex","sex")
col_lifestage   = get_col("animal-life-stage","life-stage","life_stage")
col_comments    = get_col("animal-comments","comments","animal_comments")

work = df.copy()

# clean sex
if col_animal_sex is not None:
    work["animal_sex"] = (work[col_animal_sex].astype(str).str.strip().str.lower()
                          .replace({"m":"Male","f":"Female"}))
else:
    work["animal_sex"] = "Unknown"

# parse animal-life-stage
# "2 years" to integer
# Create life_stage_bin to categorize ages
if col_lifestage is not None:
    ls = work[col_lifestage].astype(str)
else:
    ls = pd.Series("", index=work.index)

age_num = ls.str.extract(r"(\d{1,2})", expand=False).astype(float)
work["age_years"] = age_num.dropna().astype(int)
work = work[work["age_years"].notna()].copy()
work["age_years"] = work["age_years"].astype(int)

def life_stage_bin(age):
    if pd.isna(age): return "unknown"
    a = float(age)
    if a <= 2: return "Kitten"
    if a <= 6: return "Adult"
    if a <= 10: return "Mature"
    return "Senior"

work["life_stage_bin"] = work["age_years"].apply(life_stage_bin)

# parse structured animal-comments
# "Hunt: Yes; prey_p_month: 12"
if col_comments is not None:
    comm = work[col_comments].fillna("").astype(str)
else:
    comm = pd.Series([""] * len(work), index=work.index)

def parse_hunt_and_prey(s: str):
    s_norm = re.sub(r"\s+", " ", s.strip())
    hunt_val, prey_val = np.nan, np.nan
    m_h = re.search(r"Hunt\s*:\s*([^;]*)", s_norm, flags=re.I)
    if m_h:
        raw = m_h.group(1).strip().lower()
        if raw in {"yes","y","true","t","1"}:
            hunt_val = True
        elif raw in {"no","n","false","f","0"}:
            hunt_val = False
        elif raw == "":
            hunt_val = np.nan
        else:
            hunt_val = np.nan
    m_p = re.search(r"prey_p_month\s*:\s*([^;]*)", s_norm, flags=re.I)
    if m_p:
        rawp = m_p.group(1).strip()
        prey_val = pd.to_numeric(rawp, errors="coerce")
    return hunt_val, prey_val

parsed = comm.apply(parse_hunt_and_prey)
work["hunts"] = parsed.apply(lambda t: t[0])
work["prey_p_month"] = parsed.apply(lambda t: t[1])
```

------------------------------------------------------------------------

## Counts of cats tracked by life stage and sex

```{python}
import plotly.express as px

agg = (work.groupby(["life_stage_bin","animal_sex"]).size()
          .reset_index(name="count"))
figA = px.bar(agg, x="life_stage_bin", y="count", color="animal_sex", barmode="group",
              color_discrete_map={"Male": "blue", "Female": "deeppink"},
              labels={"life_stage_bin":"life stage","count":"count","animal_sex":"sex"})

figA.update_layout(
    xaxis_title="Life Stage",
    yaxis_title="Number of Cats",
    legend_title="Sex"
)

figA.show()
```

------------------------------------------------------------------------

## Prey caught per month by life stage and hunting status

```{python}
sub2 = work.copy()
sub2["hunt_label"] = np.where(sub2["hunts"], "Hunter", "Does Not Hunt")
figB = px.box(sub2, x="life_stage_bin", y="prey_p_month", color="hunt_label",
              hover_data=["animal-id","animal_sex"], points="all",
              color_discrete_map={"Hunter": "purple", "Does Not Hunt": "green"},
              labels={"animal-id": "animal id", "animal_sex": "sex", "life_stage_bin":"life stage",
                      "hunt_label":"hunting status", "prey_p_month":"prey per month"})
figB.update_layout(
    xaxis_title="Life Stage",
    yaxis_title="Number of Prey Caught per Month",
    legend_title="Hunting Status"
)

figB.show()
```

------------------------------------------------------------------------

## Age vs prey caught per month by sex

```{python}
figC = px.scatter(work, x="age_years", y="prey_p_month", color="animal_sex",
                  trendline="ols", trendline_scope="overall", trendline_color_override="black",
                  hover_data = ["animal-id", "life_stage_bin", "hunts"],
                  color_discrete_map={"Male": "blue", "Female": "deeppink"},
                  labels={"animal-id": "animal id", "life_stage_bin": "life stage", "age_years":"age",
                          "animal_sex":"sex", "hunts": "hunting status","prey_p_month":"prey per month"})
figC.update_layout(
    xaxis_title="Age (Years)",
    yaxis_title="Number of Prey Caught per Month",
    legend_title="Sex"
)

figC.show()
```

------------------------------------------------------------------------

## Limitations & Next Steps

-   Owner‑reported data → recall & detection bias
-   No spatial/temporal context in the reference file
-   No way to link animal-id to the spatial data provided
-   Next:
    -   GPS integration if linkage between animal and tracker provided in the future

------------------------------------------------------------------------

## Thank you

To view the isolated dashboard navigate to the Dashboard tab.

This was generated from the `dashboard.qmd` file.